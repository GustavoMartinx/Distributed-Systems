# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import MoviesRPC_pb2 as MoviesRPC__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in MoviesRPC_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MovieMethodsStub(object):
    """Serviço que define os métodos para operações de CRUD e buscas
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMovie = channel.unary_unary(
                '/MovieMethods/CreateMovie',
                request_serializer=MoviesRPC__pb2.Movie.SerializeToString,
                response_deserializer=MoviesRPC__pb2.Response.FromString,
                _registered_method=True)
        self.GetMovie = channel.unary_unary(
                '/MovieMethods/GetMovie',
                request_serializer=MoviesRPC__pb2.MovieName.SerializeToString,
                response_deserializer=MoviesRPC__pb2.Response.FromString,
                _registered_method=True)
        self.GetMoviesByActor = channel.unary_unary(
                '/MovieMethods/GetMoviesByActor',
                request_serializer=MoviesRPC__pb2.MovieFilters.SerializeToString,
                response_deserializer=MoviesRPC__pb2.Response.FromString,
                _registered_method=True)
        self.GetMoviesByCategory = channel.unary_unary(
                '/MovieMethods/GetMoviesByCategory',
                request_serializer=MoviesRPC__pb2.MovieFilters.SerializeToString,
                response_deserializer=MoviesRPC__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateMovie = channel.unary_unary(
                '/MovieMethods/UpdateMovie',
                request_serializer=MoviesRPC__pb2.Movie.SerializeToString,
                response_deserializer=MoviesRPC__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteMovie = channel.unary_unary(
                '/MovieMethods/DeleteMovie',
                request_serializer=MoviesRPC__pb2.MovieName.SerializeToString,
                response_deserializer=MoviesRPC__pb2.Response.FromString,
                _registered_method=True)


class MovieMethodsServicer(object):
    """Serviço que define os métodos para operações de CRUD e buscas
    """

    def CreateMovie(self, request, context):
        """Create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMovie(self, request, context):
        """Retrieve (by ID or Name)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMoviesByActor(self, request, context):
        """Retrieve by Actor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMoviesByCategory(self, request, context):
        """Retrieve by Category (Genre)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMovie(self, request, context):
        """Update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMovie(self, request, context):
        """Delete
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMovie,
                    request_deserializer=MoviesRPC__pb2.Movie.FromString,
                    response_serializer=MoviesRPC__pb2.Response.SerializeToString,
            ),
            'GetMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovie,
                    request_deserializer=MoviesRPC__pb2.MovieName.FromString,
                    response_serializer=MoviesRPC__pb2.Response.SerializeToString,
            ),
            'GetMoviesByActor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMoviesByActor,
                    request_deserializer=MoviesRPC__pb2.MovieFilters.FromString,
                    response_serializer=MoviesRPC__pb2.Response.SerializeToString,
            ),
            'GetMoviesByCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMoviesByCategory,
                    request_deserializer=MoviesRPC__pb2.MovieFilters.FromString,
                    response_serializer=MoviesRPC__pb2.Response.SerializeToString,
            ),
            'UpdateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMovie,
                    request_deserializer=MoviesRPC__pb2.Movie.FromString,
                    response_serializer=MoviesRPC__pb2.Response.SerializeToString,
            ),
            'DeleteMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMovie,
                    request_deserializer=MoviesRPC__pb2.MovieName.FromString,
                    response_serializer=MoviesRPC__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MovieMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MovieMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MovieMethods(object):
    """Serviço que define os métodos para operações de CRUD e buscas
    """

    @staticmethod
    def CreateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MovieMethods/CreateMovie',
            MoviesRPC__pb2.Movie.SerializeToString,
            MoviesRPC__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MovieMethods/GetMovie',
            MoviesRPC__pb2.MovieName.SerializeToString,
            MoviesRPC__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMoviesByActor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MovieMethods/GetMoviesByActor',
            MoviesRPC__pb2.MovieFilters.SerializeToString,
            MoviesRPC__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMoviesByCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MovieMethods/GetMoviesByCategory',
            MoviesRPC__pb2.MovieFilters.SerializeToString,
            MoviesRPC__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MovieMethods/UpdateMovie',
            MoviesRPC__pb2.Movie.SerializeToString,
            MoviesRPC__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MovieMethods/DeleteMovie',
            MoviesRPC__pb2.MovieName.SerializeToString,
            MoviesRPC__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
